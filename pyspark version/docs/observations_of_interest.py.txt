#* observations_of_interest:
#*   desc: finds observation concepts
#*   ext: py
#*   inputs:
#*   - observation
#*   - concept_set_members
#*   - COHORT
#*   - customize_concept_sets
#* 

#Purpose - The purpose of this pipeline is to produce a day level and a persons level fact table for the confirmed (positive COVID PCR or AG lab test or U07.1 diagnosis charted) COVID positive patients in the N3C enclave.
#Creator/Owner/contact - Andrea Zhou
#Last Update - 9/4/24
#Description - This nodes filter the source OMOP tables for rows that have a standard concept id associated with one of the concept sets described in the data dictionary in the README through the use of a fusion sheet.  Indicator names for these variables are assigned, and the indicators are collapsed to unique instances on the basis of patient and date.

def observations_of_interest(observation, concept_set_members, COHORT, customize_concept_sets):

    #bring in only cohort patient ids
    persons = COHORT.select('person_id')
    #filter observations table to only cohort patients    
    observations_df = observation \
        .select('person_id','observation_date','observation_concept_id') \
        .where(F.col('observation_date').isNotNull()) \
        .withColumnRenamed('observation_date','date') \
        .withColumnRenamed('observation_concept_id','concept_id') \
        .join(persons,'person_id','inner')

    #filter fusion sheet for concept sets and their future variable names that have concepts in the observations domain
    fusion_df = customize_concept_sets \
        .filter(customize_concept_sets.domain.contains('observation')) \
        .select('concept_set_name', 'codeset_id', 'indicator_prefix')

    concept_members_df = concept_set_members

    codeset_id = False
    #filter concept set members table to only concept ids for the observations of interest
    #prioritize codeset_id
    if codeset_id == True:
        #create concepts_df from codeset_id
        concepts_df_id = concept_members_df \
            .select('concept_id', 'codeset_id') \
            .join(fusion_df, 'codeset_id', 'inner') \
            .select('concept_id','indicator_prefix')

        #create concepts_df from concept_set_name
        concepts_df_name = concept_members_df \
            .select('concept_set_name', 'is_most_recent_version', 'concept_id') \
            .where((F.col('is_most_recent_version')=='true')) \
            .join(fusion_df.where(F.col('codeset_id').isNull()), 'concept_set_name', 'inner') \
            .select('concept_id','indicator_prefix')

        concepts_df = concepts_df_name.join(concepts_df_id, ['concept_id', 'indicator_prefix'], 'outer')

    #use only concept_set_name
    else:
        concepts_df = concept_members_df \
            .select('concept_set_name', 'is_most_recent_version', 'concept_id') \
            .where(F.col('is_most_recent_version')=='true') \
            .join(fusion_df, 'concept_set_name', 'inner') \
            .select('concept_id','indicator_prefix')

    #find observations information based on matching concept ids for observations of interest
    df = observations_df.join(concepts_df, 'concept_id', 'inner')
    #collapse to unique person and visit date and pivot on future variable name to create flag for rows associated with the concept sets for observations of interest    
    df = df.groupby('person_id','date').pivot('indicator_prefix').agg(F.lit(1)).na.fill(0)

    return df

#################################################
## Global imports and functions included below ##
#################################################

from pyspark.sql import functions as F
