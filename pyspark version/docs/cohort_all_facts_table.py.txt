#* cohort_all_facts_table:
#*   desc: creates day level fact table
#*   ext: py
#*   inputs:
#*   - conditions_of_interest
#*   - visits_of_interest
#*   - procedures_of_interest
#*   - observations_of_interest
#*   - drugs_of_interest
#*   - COVID_deaths
#*   - COHORT
#*   - devices_of_interest
#*   - microvisit_to_macrovisit_lds
#*   - vaccines_of_interest
#*   - quant_measurements_of_interest
#*   - quali_measurements_of_interest
#* 

#Purpose - The purpose of this pipeline is to produce a day level and a persons level fact table for the confirmed (positive COVID PCR or AG lab test or U07.1 diagnosis charted) COVID positive patients in the N3C enclave.
#Creator/Owner/contact - Andrea Zhou
#Last Update - 11/20/24
#Description - All facts collected in the previous steps are combined in this cohort_all_facts_table on the basis of unique days for each patient and logic is applied to see if the instance of the coded fact appeared in the EHR prior to or after the patient's first COVID-19 positive PCR or AG lab test.  Indicators are created for the presence or absence of events, medications, conditions, measurements, device exposures, observations, procedures, and outcomes, either occurring before COVID index date, during the patientâ€™s hospitalization, or in the period after COVID index date.  It also creates an indicator for whether the date where a fact was noted occurred during any hospitalization, not just the COVID associated ones found in the visits of interest node.  A flag for the visit in which the patient is noted to have their first covid reinfection is also thrown in this node. The default time range is 60 days after index date, but the number of days can be specified by parameter input based on researcher interests. This table is useful if the analyst needs to use actual dates of events as it provides more detail than the final patient-level table.  Use the max and min functions to find the first and last occurrences of any events.

def cohort_all_facts_table(conditions_of_interest, visits_of_interest, procedures_of_interest, observations_of_interest, drugs_of_interest, COVID_deaths, COHORT, devices_of_interest, microvisit_to_macrovisit_lds, vaccines_of_interest, quant_measurements_of_interest, quali_measurements_of_interest):

    persons_df = COHORT.select('person_id', 'COVID_first_PCR_or_AG_lab_positive', 'COVID_first_diagnosis_date', 'COVID_first_poslab_or_diagnosis_date').dropDuplicates()
    macrovisits_df = microvisit_to_macrovisit_lds
    vaccines_df = vaccines_of_interest
    procedures_df = procedures_of_interest
    devices_df = devices_of_interest
    observations_df = observations_of_interest
    conditions_df = conditions_of_interest
    drugs_df = drugs_of_interest
    qualitative_df = quali_measurements_of_interest
    quantitative_df = quant_measurements_of_interest
    visits_df = visits_of_interest
    deaths_df = COVID_deaths.where(
        (COVID_deaths.date.isNotNull()) 
        & (COVID_deaths.date >= "2018-01-01") 
        & (COVID_deaths.date < (F.col('data_extraction_date')+(365*2)))) \
        .drop('data_extraction_date')

    df = macrovisits_df.select('person_id','visit_start_date').withColumnRenamed('visit_start_date','date')
    df = df.join(vaccines_df, on=list(set(df.columns)&set(vaccines_df.columns)), how='outer')
    df = df.join(procedures_df, on=list(set(df.columns)&set(procedures_df.columns)), how='outer')
    df = df.join(devices_df, on=list(set(df.columns)&set(devices_df.columns)), how='outer')
    df = df.join(observations_df, on=list(set(df.columns)&set(observations_df.columns)), how='outer')
    df = df.join(conditions_df, on=list(set(df.columns)&set(conditions_df.columns)), how='outer')
    df = df.join(drugs_df, on=list(set(df.columns)&set(drugs_df.columns)), how='outer')
    df = df.join(qualitative_df, on=list(set(df.columns)&set(qualitative_df.columns)), how='outer') 
    df = df.join(quantitative_df, on=list(set(df.columns)&set(quantitative_df.columns)), how='outer')   
    df = df.join(deaths_df, on=list(set(df.columns)&set(deaths_df.columns)), how='outer')
   
    #add F.max of all indicator columns to collapse all cross-domain flags to unique person and visit rows
    df = df.groupby('person_id', 'date').agg(*[F.max(col).alias(col) for col in df.columns if col not in ('person_id','date')])
   
    #join persons
    df = persons_df.join(df, 'person_id', 'left')
    df = visits_df.join(df, 'person_id', 'outer') 

    #create reinfection indicator, minimum 60 day window from index date to subsequent positive test
    reinfection_wait_time = 60
    reinfection_df = df.withColumn('is_reinfection', 
        F.when(( (F.col('PCR_AG_Pos')==1) & (F.datediff(F.col('date'), F.col('COVID_first_poslab_or_diagnosis_date')) > reinfection_wait_time) ), 1).otherwise(0)) \
        .where(F.col('is_reinfection')==1) \
        .groupby('person_id') \
        .agg(F.min('date').alias('date'), 
            F.max('is_reinfection').alias('is_first_reinfection'))
    df = df.join(reinfection_df, on=['person_id','date'], how='left')

    #create new death within fixed window post COVID flag to be used for severity calculation, same window as looking for reinfection 
    df = df.withColumn('death_within_specified_window_post_covid', F.when(
        (F.col('COVID_patient_death') ==1) &
        (F.datediff("date", "COVID_first_poslab_or_diagnosis_date") > 0) 
        & (F.datediff("date", "COVID_first_poslab_or_diagnosis_date") < reinfection_wait_time), 1).otherwise(0))
    
    #defaulted to find the lesser date value of the first lab positive result date and the first diagnosis date, could be adjusted to only "COVID_first_diagnosis_date" or only "COVID_first_PCR_or_AG_lab_positive" based on desired index event definition
    df = df.withColumn('pre_COVID', F.when(F.datediff("COVID_first_poslab_or_diagnosis_date","date")>=0, 1).otherwise(0))
    df = df.withColumn('post_COVID', F.when(F.datediff("COVID_first_poslab_or_diagnosis_date","date")<0, 1).otherwise(0))

    #dependent on the definition chosen in the visits of interest node, no changes necessary here
    df = df.withColumn('during_first_strong_COVID_hospitalization', F.when((F.datediff("first_strong_COVID_hospitalization_end_date","date")>=0) & (F.datediff("first_strong_COVID_hospitalization_start_date","date")<=0), 1).otherwise(0))
    df = df.withColumn('during_first_strong_COVID_ED_visit', F.when(F.datediff("first_strong_COVID_ED_only_start_date","date")==0, 1).otherwise(0))

    #weak ED and hospitalization from visits of interest node, no changes necessary here
    df = df.withColumn('during_first_weak_COVID_hospitalization', F.when((F.datediff("first_weak_COVID_hospitalization_end_date","date")>=0) & (F.datediff("first_weak_COVID_hospitalization_start_date","date")<=0), 1).otherwise(0))
    df = df.withColumn('during_first_weak_COVID_ED_visit', F.when(F.datediff("first_weak_COVID_ED_only_start_date","date")==0, 1).otherwise(0))

    #drop dates for all facts table once indicators are created for 'during_first_COVID_hospitalization'
    df = df.drop('first_strong_COVID_hospitalization_start_date', 'first_strong_COVID_hospitalization_end_date','first_strong_COVID_ED_only_start_date', 'first_weak_COVID_hospitalization_start_date', 'first_weak_COVID_hospitalization_end_date', 'first_weak_COVID_ED_only_start_date', 'macrovisit_start_date', 'macrovisit_end_date')

    #create and join in flag that indicates whether the visit was during a macrovisit (1) or not (0)
    #any conditions, observations, procedures, devices, drugs, measurements, and/or death flagged 
    #with a (1) on that particular visit date would then be considered to have happened during a macrovisit    
    macrovisits_df = macrovisits_df \
        .select('person_id', 'macrovisit_start_date', 'macrovisit_end_date') \
        .where(F.col('macrovisit_start_date').isNotNull() & F.col('macrovisit_end_date').isNotNull()) \
        .distinct()
    df_hosp = df.select('person_id', 'date').distinct() \
        .join(macrovisits_df, on='person_id', how= 'outer')
    df_hosp = df_hosp.withColumn('during_macrovisit_hospitalization', F.when(F.col('date').between(F.col('macrovisit_start_date'), F.col('macrovisit_end_date')), 1).otherwise(0)) \
        .where(F.col('during_macrovisit_hospitalization') == 1) \
        .dropDuplicates(['person_id', 'date'])
    df = df.join(df_hosp, on=['person_id','date'], how="left")
    
    #fill of null non-continuous variables with 0
    df = df.na.fill(value=0, subset = [col.name for col in df.schema.fields if not isinstance(col.dataType, DoubleType) | isinstance(col.dataType, LongType)])

    return df
    
#################################################
## Global imports and functions included below ##
#################################################

from pyspark.sql import functions as F
from pyspark.sql.types import IntegerType, LongType, DoubleType
