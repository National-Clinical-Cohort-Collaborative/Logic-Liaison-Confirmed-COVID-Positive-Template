#* COHORT:
#*   desc: identifies cohort of patients
#*   ext: py
#*   inputs:
#*   - measurement
#*   - concept_set_members
#*   - person
#*   - location
#*   - manifest
#*   - condition_occurrence
#*   - microvisit_to_macrovisit_lds
#* 

#Purpose - The purpose of this pipeline is to produce a day level and a persons level fact table for the confirmed (positive COVID PCR or AG lab test or U07.1 diagnosis charted) COVID positive patients in the N3C enclave. More information can be found in the README linked here (https://unite.nih.gov/workspace/notepad/view/ri.notepad.main.notepad.eb0ce7bb-a20b-4e81-bcef-aeb919bd350a).
#Creator/Owner/contact - Andrea Zhou
#Last Update - 12/6/23
#Description - This node identifies all patients with positive results from a PCR or AG COVID-19 lab test and the date of the patients' first instance of this type of COVID-19+ test.  It also identifies all patients with a COVID-19 diagnosis charted and the date of the patients’ first instance of this type of diagnosis (when available).  The earlier of the two is considered the index date for downstream calculations.  This transform then gathers some commonly used facts about these patients from the "person" and "location" tables, as well as some facts about the patient's institution (from the "manifest" table).  Available age, race, ethnicity, and locations data (including SDOH variables for L3 only) is gathered at this node.  The patient’s number of visits before and after covid as well as the number of days in their observation period before and after covid is calculated from the “microvisits_to_macrovisits” table in this node after filtering for plausible visit dates based on a site's latest data_extraction_date.  These facts will eventually be joined with the final patient-level table in the final node.

def COHORT(measurement, concept_set_members, person, location, manifest, condition_occurrence, microvisit_to_macrovisit_lds):
        
    """
    Select proportion of enclave patients to use: A value of 1.0 indicates the pipeline will use all patients in the persons table.  
    A value less than 1.0 takes a random sample of the patients with a value of 0.001 (for example) representing a 0.1% sample of the persons table will be used.
    """
    proportion_of_patients_to_use = 1.0

    concepts_df = concept_set_members
    person_sample = (person
        .select('person_id','year_of_birth','month_of_birth','day_of_birth','ethnicity_concept_name','race_concept_name','gender_concept_name','location_id','data_partner_id')
        .withColumnRenamed('gender_concept_name', 'sex')
        .distinct()
        .sample(False, proportion_of_patients_to_use, 111))
    measurement_df = (measurement
        .select('person_id', 'measurement_date', 'measurement_concept_id', 'value_as_concept_id')
        .where(measurement.measurement_date.isNotNull())
        .join(person_sample, 'person_id', 'inner'))
    conditions_df = (condition_occurrence
        .select('person_id', 'condition_start_date', 'condition_concept_id')
        .where(condition_occurrence.condition_start_date.isNotNull())
        .join(person_sample, 'person_id','inner'))
    manifest_df = manifest.select('data_partner_id','run_date','cdm_name','cdm_version','shift_date_yn','max_num_shift_days').withColumnRenamed("run_date", "data_extraction_date")   
    visits_df = microvisit_to_macrovisit_lds.select("person_id", "data_partner_id", "macrovisit_start_date", "visit_start_date") \
        .join(manifest_df.select('data_partner_id', 'data_extraction_date'), on='data_partner_id', how='left') \
        .where(
        (F.col('visit_start_date') >= "2018-01-01") &
        (F.col('visit_start_date') < (F.col('data_extraction_date')+(365*2)))
    ).drop('data_partner_id', 'data_extraction_date')
    location_df = location.dropDuplicates(subset=['location_id']).select('location_id','city','state','zip','county').withColumnRenamed('zip','postal_code')   
     
    """
    make list of concept IDs for Covid tests and filter measurements table for only these concept IDs
    then make list of concept IDs for POSITIVE Covid tests and label covid test measurements table as 1 for pos covid tests concept IDs and 0 for not
    """
    covid_measurement_test_ids = list(concepts_df.where((concepts_df.concept_set_name=="ATLAS SARS-CoV-2 rt-PCR and AG") & (concepts_df.is_most_recent_version=='true')).select('concept_id').toPandas()['concept_id'])
    covid_positive_measurement_ids = list(concepts_df.where((concepts_df.concept_set_name=="ResultPos") & (concepts_df.is_most_recent_version=='true')).select('concept_id').toPandas()['concept_id'])
    measurements_of_interest = measurement_df.where(measurement_df.measurement_concept_id.isin(covid_measurement_test_ids)) 
    measurements_of_interest = measurements_of_interest.where(measurements_of_interest.value_as_concept_id.isin(covid_positive_measurement_ids)).withColumnRenamed("measurement_date","covid_measurement_date").dropDuplicates(subset=['person_id','covid_measurement_date']).select('person_id','covid_measurement_date')
    first_covid_pos_lab = measurements_of_interest.groupBy('person_id').agg(F.min('covid_measurement_date').alias('COVID_first_PCR_or_AG_lab_positive'))
    
    # add flag for first date of COVID-19 diagnosis code if available
    COVID_concept_ids = list(concepts_df.where((concepts_df.concept_set_name=="N3C Covid Diagnosis") & (concepts_df.is_most_recent_version=='true')).select('concept_id').toPandas()['concept_id'])
    conditions_of_interest = conditions_df.where(conditions_df.condition_concept_id.isin(COVID_concept_ids)).withColumnRenamed("condition_start_date","covid_DIAGNOSIS_date").dropDuplicates(subset=['person_id','covid_DIAGNOSIS_date']).select('person_id','covid_DIAGNOSIS_date')
    first_covid_DIAGNOSIS = conditions_of_interest.groupBy('person_id').agg(F.min('covid_DIAGNOSIS_date').alias('COVID_first_diagnosis_date'))
    
    #join lab positive with diagnosis positive to create all confirmed covid patients cohort
    df = first_covid_pos_lab.join(first_covid_DIAGNOSIS, 'person_id', 'outer')
    #add a column for the earlier of the diagnosis or the lab test dates for all confirmed covid patients
    df = df.withColumn("COVID_first_poslab_or_diagnosis_date", F.least(df.COVID_first_PCR_or_AG_lab_positive, df.COVID_first_diagnosis_date))

    #add in demographics+locations data for all confirmed covid patients
    df = df.join(person_sample, 'person_id', 'inner')
    #join in location_df data for all confirmed covid patients
    df = df.join(location_df, 'location_id','left')

    #join in manifest_df information
    df = df.join(manifest_df, 'data_partner_id','inner')
    df = df.withColumn('max_num_shift_days', F.when(F.col('max_num_shift_days')=="", F.lit('0')).otherwise(F.regexp_replace(F.lower('max_num_shift_days'), 'na', '0')))
    
    #calculate date of birth for all confirmed covid patients
    df = df.withColumn("new_year_of_birth", F.when(F.col('year_of_birth').isNull(),1)
                                                .otherwise(F.col('year_of_birth')))
    df = df.withColumn("new_month_of_birth", F.when(F.col('month_of_birth').isNull(), 7)
                                                .when(F.col('month_of_birth')==0, 7)
                                                .otherwise(F.col('month_of_birth')))
    df = df.withColumn("new_day_of_birth", F.when(F.col('day_of_birth').isNull(), 1)
                                                .when(F.col('day_of_birth')==0, 1)
                                                .otherwise(F.col('day_of_birth')))

    df = df.withColumn("date_of_birth", F.concat_ws("-", F.col("new_year_of_birth"), F.col("new_month_of_birth"), F.col("new_day_of_birth")))
    df = df.withColumn("date_of_birth", F.to_date("date_of_birth", format=None)) 

    #convert date of birth string to date and apply min and max reasonable birthdate filter parameters, inclusive
    max_shift_as_int = df.withColumn("shift_days_as_int", F.col('max_num_shift_days').cast(IntegerType())) \
        .select(F.max('shift_days_as_int')) \
        .head()[0]
    min_reasonable_dob = "1902-01-01"
    max_reasonable_dob = F.date_add(F.current_date(), max_shift_as_int)
    df = df.withColumn("date_of_birth", F.when(F.col('date_of_birth').between(min_reasonable_dob, max_reasonable_dob), F.col('date_of_birth')).otherwise(None))

    #df = df.withColumn("age", F.floor(F.months_between(max_reasonable_dob, "date_of_birth", roundOff=False)/12))
    df = df.withColumn("age_at_covid", F.floor(F.months_between("COVID_first_poslab_or_diagnosis_date", "date_of_birth", roundOff=False)/12))

    H = ['Hispanic']
    A = ['Asian', 'Asian Indian', 'Bangladeshi', 'Bhutanese', 'Burmese', 'Cambodian', 'Chinese', 'Filipino', 'Hmong', 'Indonesian', 'Japanese', 'Korean', 'Laotian', 'Malaysian', 'Maldivian', 'Nepalese', 'Okinawan', 'Pakistani', 'Singaporean', 'Sri Lankan', 'Taiwanese', 'Thai', 'Vietnamese']
    B_AA = ['African', 'African American', 'Barbadian', 'Black', 'Black or African American', 'Dominica Islander', 'Haitian', 'Jamaican', 'Madagascar', 'Trinidadian', 'West Indian']
    W = ['White']
    NH_PI = ['Melanesian', 'Micronesian', 'Native Hawaiian or Other Pacific Islander', 'Other Pacific Islander', 'Polynesian']
    AI_AN = ['American Indian or Alaska Native']
    O = ['More than one race', 'Multiple race', 'Multiple races', 'Other', 'Other Race']
    U = ['Asian or Pacific islander', 'No Information', 'No matching concept', 'Refuse to Answer', 'Unknown', 'Unknown racial group']

    df = df.withColumn("race", F.when(F.col("race_concept_name").isin(H), "Hispanic or Latino")
                        .when(F.col("race_concept_name").isin(A), "Asian")
                        .when(F.col("race_concept_name").isin(B_AA), "Black or African American")
                        .when(F.col("race_concept_name").isin(W), "White")
                        .when(F.col("race_concept_name").isin(NH_PI), "Native Hawaiian or Other Pacific Islander") 
                        .when(F.col("race_concept_name").isin(AI_AN), "American Indian or Alaska Native")
                        .when(F.col("race_concept_name").isin(O), "Other")
                        .when(F.col("race_concept_name").isin(U), "Unknown")
                        .otherwise("Unknown"))

    df = df.withColumn("race_ethnicity", F.when(F.col("ethnicity_concept_name") == 'Hispanic or Latino', "Hispanic or Latino Any Race")
                        .when(F.col("race_concept_name").isin(H), "Hispanic or Latino Any Race")
                        .when(F.col("race_concept_name").isin(A), "Asian Non-Hispanic")
                        .when(F.col("race_concept_name").isin(B_AA), "Black or African American Non-Hispanic")
                        .when(F.col("race_concept_name").isin(W), "White Non-Hispanic")
                        .when(F.col("race_concept_name").isin(NH_PI), "Native Hawaiian or Other Pacific Islander Non-Hispanic") 
                        .when(F.col("race_concept_name").isin(AI_AN), "American Indian or Alaska Native Non-Hispanic")
                        .when(F.col("race_concept_name").isin(O), "Other Non-Hispanic")
                        .when(F.col("race_concept_name").isin(U), "Unknown")
                        .otherwise("Unknown"))
                        
    #create visit counts/obs period for before and post COVID 
    hosp_visits = visits_df.where(F.col("macrovisit_start_date").isNotNull()) \
        .orderBy("visit_start_date") \
        .coalesce(1) \
        .dropDuplicates(["person_id", "macrovisit_start_date"]) #hospital
    non_hosp_visits = visits_df.where(F.col("macrovisit_start_date").isNull()) \
        .dropDuplicates(["person_id", "visit_start_date"]) #non-hospital
    visits_df = hosp_visits.union(non_hosp_visits) #join the two

    """
    join in earliest index date value and use to calculate datediff between lab and visit 
    if positive then date is before the PCR/AG+ date
    if negative then date is after the PCR/AG+ date
    """
    visits_df = visits_df \
        .join(df.select('person_id','COVID_first_poslab_or_diagnosis_date','shift_date_yn','max_num_shift_days'), 'person_id', 'inner') \
        .withColumn('earliest_index_minus_visit_start_date', F.datediff('COVID_first_poslab_or_diagnosis_date','visit_start_date'))

    #counts for visits before
    visits_before = visits_df.where(F.col('earliest_index_minus_visit_start_date') > 0) \
        .groupBy("person_id") \
        .count() \
        .select("person_id", F.col('count').alias('number_of_visits_before_covid')) 
    #obs period in days before, where earliest_index_minus_visit_start_date = 0 means the pt_max_visit_date is the index date
    observation_before = visits_df.where(F.col('earliest_index_minus_visit_start_date') >= 0) \
        .groupby('person_id').agg(
        F.max('visit_start_date').alias('pt_max_visit_date'),
        F.min('visit_start_date').alias('pt_min_visit_date')) \
        .withColumn('observation_period_before_covid', F.datediff('pt_max_visit_date', 'pt_min_visit_date')) \
        .select('person_id', 'observation_period_before_covid')

    #counts for visits after
    visits_post = visits_df.where(F.col('earliest_index_minus_visit_start_date') < 0) \
        .groupBy("person_id") \
        .count() \
        .select("person_id", F.col('count').alias('number_of_visits_post_covid'))
    #obs period in days after, where earliest_index_minus_visit_start_date = 0 means the pt_min_visit_date is the index date
    observation_post = visits_df.where(F.col('earliest_index_minus_visit_start_date') <= 0) \
        .groupby('person_id').agg(
        F.max('visit_start_date').alias('pt_max_visit_date'),
        F.min('visit_start_date').alias('pt_min_visit_date')) \
        .withColumn('observation_period_post_covid', F.datediff('pt_max_visit_date', 'pt_min_visit_date')) \
        .select('person_id', 'observation_period_post_covid')
    
    #join visit counts/obs periods dataframes with main dataframe
    df = df.join(visits_before, "person_id", "left")
    df = df.join(observation_before, "person_id", "left")
    df = df.join(visits_post, "person_id", "left")
    df = df.join(observation_post, "person_id", "left")

    #LEVEL 2 ONLY
    #df = df.withColumn('max_num_shift_days', F.concat(F.col('max_num_shift_days'), F.lit(" + 180"))).withColumn('shift_date_yn', F.lit('Y'))

    df = df.select(
        'person_id',
        'COVID_first_PCR_or_AG_lab_positive',
        'COVID_first_diagnosis_date',
        'COVID_first_poslab_or_diagnosis_date',
        'number_of_visits_before_covid',
        'observation_period_before_covid',
        'number_of_visits_post_covid',
        'observation_period_post_covid',
        'sex',
        'city',
        'state',
        'postal_code',
        'county',
        'age_at_covid',
        'race',
        'race_ethnicity',
        'data_partner_id',
        'data_extraction_date',
        'cdm_name',
        'cdm_version',
        'shift_date_yn',
        'max_num_shift_days')

    return df
    

#################################################
## Global imports and functions included below ##
#################################################
from pyspark.sql import functions as F
from pyspark.sql.types import IntegerType
