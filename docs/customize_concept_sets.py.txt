#* customize_concept_sets:
#*   desc: combines all fusion inputs
#*   ext: py
#*   inputs:
#*   - LL_concept_sets_fusion_SNOMED
#*   - LL_DO_NOT_DELETE_REQUIRED_concept_sets_confirmed
#*   - canonical_units_of_measure
#*   - concept_set_members
#* 

#The purpose of this node is to optimize the user's experience connecting a customized concept set "fusion sheet" input data frame to replace LL_concept_sets_fusion_SNOMED.

def customize_concept_sets(LL_concept_sets_fusion, LL_DO_NOT_DELETE_REQUIRED_concept_sets_confirmed, canonical_units_of_measure, concept_set_members):

    concepts_df = concept_set_members
    canonical_df = canonical_units_of_measure
    required = concepts_df.where((F.col('is_most_recent_version')=='true')) \
            .select('concept_set_name', 'codeset_id') \
            .dropDuplicates() \
            .join(LL_DO_NOT_DELETE_REQUIRED_concept_sets_confirmed.drop('codeset_id'), on = 'concept_set_name', how = 'right')
    customizable = LL_concept_sets_fusion
    measurements_df = customizable \
        .filter(customizable.domain.contains('measurement')) \
        .select('concept_set_name', 'indicator_prefix')
    
    ## Join Canonical units list with concept sets so each of the codeset IDS has a valid Concept name remove duplicates so each entry shows up once.
    codeset_df = canonical_df.join(concepts_df, on = 'codeset_id', how = 'left')
    count_df = codeset_df.groupBy('codeset_id').count()
    duplicate_values_df = count_df.filter(F.col('count') > 1).select('codeset_id')
    codeset_df = codeset_df.join(duplicate_values_df, 'codeset_id', 'left_anti')
    
    ## Join Required and customizable concept set lists
    df = required.join(customizable, on = required.columns, how = 'outer')

    ## Perform left_anti join to find rows in customized concepts in the measurement domain where concept_set_name does not exist in the codeset ids from canonical units
    missing_values_df = measurements_df.join(codeset_df, 'concept_set_name', 'left_anti')
    
    ## Find if any of the measurement concept sets do not have canonical units and are therefore unhamonized
    missing_count = missing_values_df.count()
    import warnings
    ## If there are concept sets without hamonized units, warn the user
    if missing_count > 0:
         warnings.warn("Some of the selected measurements have not undergone unit harmonization. We recomend exploring the units reported in quant_measurements_of_interest node")
    
    ## Create the list of concept sets to be included with a flag if they are measurements without harmonized units.
    df = df.join(missing_values_df.withColumnRenamed('indicator_prefix', 'missing_indicator_prefix'), 'concept_set_name', 'left') 
    df_with_flag = df.withColumn('harmonized_flag', F.when(F.col('missing_indicator_prefix').isNotNull(), 0).otherwise(1))
    df = df_with_flag.drop('missing_indicator_prefix')
    
    return df
    
#################################################
## Global imports and functions included below ##
#################################################

from pyspark.sql import functions as F
